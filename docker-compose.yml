version: '3.8'

services:
  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    container_name: miner_detector_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-minerpass123}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: miner_detector_db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-minerdb}
      POSTGRES_USER: ${POSTGRES_USER:-mineruser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-minerpass123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mineruser} -d ${POSTGRES_DB:-minerdb}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for background tasks
  celery_worker:
    build: .
    container_name: miner_detector_celery
    restart: unless-stopped
    command: celery -A miner_detector_optimized.celery worker --loglevel=info
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-minerpass123}@redis:6379/0
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-mineruser}:${POSTGRES_PASSWORD:-minerpass123}@postgres:5432/${POSTGRES_DB:-minerdb}
      - XAI_API_KEY=${XAI_API_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs

  # Celery beat for scheduled tasks
  celery_beat:
    build: .
    container_name: miner_detector_beat
    restart: unless-stopped
    command: celery -A miner_detector_optimized.celery beat --loglevel=info
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-minerpass123}@redis:6379/0
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-mineruser}:${POSTGRES_PASSWORD:-minerpass123}@postgres:5432/${POSTGRES_DB:-minerdb}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs

  # Main application
  app:
    build: .
    container_name: miner_detector_app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-minerpass123}@redis:6379/0
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-mineruser}:${POSTGRES_PASSWORD:-minerpass123}@postgres:5432/${POSTGRES_DB:-minerdb}
      - SECRET_KEY=${SECRET_KEY:-super-secret-key-change-in-production}
      - JWT_SECRET=${JWT_SECRET:-jwt-secret-change-in-production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - MAX_WORKERS=4
      - REDIS_POOL_SIZE=20
      - HTTP_TIMEOUT=30
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: miner_detector_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: miner_detector_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: miner_detector_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: miner_detector_network